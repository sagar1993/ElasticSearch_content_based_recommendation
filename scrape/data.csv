,text,title,url
0,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Recent changes Understanding systems,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
1,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Recent changes The process of abstraction,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
2,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Recent changes Thinking in objects,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
3,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Recent changes Understanding class definitions and types,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
4,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Recent changes Expanding your class definitions,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
5,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Recent changes Adding behavior to objects,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
6,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Recent changes The process of encapsulation,https://en.wikibooks.org//wiki/Special:RecentChangesLinked/Category:Book:Java_Programming
7,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",How to format the content Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Conventions
8,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",How to format the content The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Conventions
9,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",How to format the content Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Conventions
10,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",How to format the content Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Conventions
11,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",How to format the content Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Conventions
12,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",How to format the content Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Conventions
13,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",How to format the content The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Conventions
14,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Who is contributing Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Contributors
15,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Who is contributing The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Contributors
16,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Who is contributing Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Contributors
17,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Who is contributing Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Contributors
18,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Who is contributing Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Contributors
19,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Who is contributing Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Contributors
20,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Who is contributing The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Contributors
21,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",About this book Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
22,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",About this book The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
23,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",About this book Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
24,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",About this book Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
25,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",About this book Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
26,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",About this book Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
27,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",About this book The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/About_This_Book
28,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",History of Java Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/History
29,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",History of Java The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/History
30,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",History of Java Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/History
31,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",History of Java Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/History
32,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",History of Java Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/History
33,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",History of Java Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/History
34,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",History of Java The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/History
35,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Overview of the Java programming language Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
36,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Overview of the Java programming language The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
37,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Overview of the Java programming language Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
38,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Overview of the Java programming language Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
39,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Overview of the Java programming language Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
40,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Overview of the Java programming language Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
41,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Overview of the Java programming language The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Java_Overview
42,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",The Java platform (JRE & JDK) Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
43,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",The Java platform (JRE & JDK) The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
44,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",The Java platform (JRE & JDK) Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
45,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",The Java platform (JRE & JDK) Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
46,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",The Java platform (JRE & JDK) Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
47,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",The Java platform (JRE & JDK) Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
48,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",The Java platform (JRE & JDK) The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/The_Java_Platform
49,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Installing Java on Your Computer Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Installation
50,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Installing Java on Your Computer The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Installation
51,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Installing Java on Your Computer Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Installation
52,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Installing Java on Your Computer Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Installation
53,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Installing Java on Your Computer Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Installation
54,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Installing Java on Your Computer Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Installation
55,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Installing Java on Your Computer The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Installation
56,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Compiling programs Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Compilation
57,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Compiling programs The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Compilation
58,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Compiling programs Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Compilation
59,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Compiling programs Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Compilation
60,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Compiling programs Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Compilation
61,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Compiling programs Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Compilation
62,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Compiling programs The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Compilation
63,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Running Java programs Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Execution
64,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Running Java programs The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Execution
65,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Running Java programs Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Execution
66,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Running Java programs Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Execution
67,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Running Java programs Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Execution
68,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Running Java programs Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Execution
69,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Running Java programs The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Execution
70,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Understanding a Java program Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
71,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Understanding a Java program The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
72,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Understanding a Java program Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
73,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Understanding a Java program Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
74,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Understanding a Java program Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
75,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Understanding a Java program Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
76,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Understanding a Java program The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Understanding_a_Java_Program
77,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Java IDEs Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
78,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Java IDEs The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
79,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Java IDEs Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
80,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Java IDEs Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
81,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Java IDEs Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
82,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Java IDEs Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
83,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Java IDEs The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Java_IDEs
84,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Statements Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Statements
85,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Statements The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Statements
86,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Statements Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Statements
87,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Statements Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Statements
88,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Statements Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Statements
89,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Statements Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Statements
90,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Statements The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Statements
91,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Conditional blocks Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
92,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Conditional blocks The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
93,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Conditional blocks Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
94,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Conditional blocks Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
95,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Conditional blocks Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
96,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Conditional blocks Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
97,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Conditional blocks The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Conditional_blocks
98,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Loop blocks Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
99,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Loop blocks The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
100,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Loop blocks Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
101,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Loop blocks Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
102,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Loop blocks Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
103,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Loop blocks Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
104,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Loop blocks The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Loop_blocks
105,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Boolean expressions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
106,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Boolean expressions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
107,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Boolean expressions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
108,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Boolean expressions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
109,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Boolean expressions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
110,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Boolean expressions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
111,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Boolean expressions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Boolean_expressions
112,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Variables Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Variables
113,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Variables The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Variables
114,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Variables Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Variables
115,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Variables Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Variables
116,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Variables Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Variables
117,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Variables Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Variables
118,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Variables The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Variables
119,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Primitive Types Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
120,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Primitive Types The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
121,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Primitive Types Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
122,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Primitive Types Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
123,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Primitive Types Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
124,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Primitive Types Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
125,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Primitive Types The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Primitive_Types
126,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Arithmetic expressions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
127,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Arithmetic expressions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
128,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Arithmetic expressions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
129,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Arithmetic expressions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
130,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Arithmetic expressions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
131,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Arithmetic expressions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
132,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Arithmetic expressions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Arithmetic_expressions
133,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Literals Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Literals
134,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Literals The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Literals
135,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Literals Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Literals
136,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Literals Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Literals
137,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Literals Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Literals
138,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Literals Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Literals
139,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Literals The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Literals
140,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Methods Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Methods
141,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Methods The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Methods
142,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Methods Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Methods
143,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Methods Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Methods
144,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Methods Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Methods
145,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Methods Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Methods
146,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Methods The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Methods
147,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",String Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
148,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",String The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
149,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",String Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
150,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",String Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
151,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",String Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
152,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",String Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
153,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",String The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/API/java.lang.String
154,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Objects Understanding systems,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
155,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Objects The process of abstraction,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
156,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Objects Thinking in objects,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
157,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Objects Understanding class definitions and types,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
158,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Objects Expanding your class definitions,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
159,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Objects Adding behavior to objects,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
160,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Objects The process of encapsulation,"https://en.wikibooks.org//wiki/Java_Programming/Classes,_Objects_and_Types"
161,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Packages Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Packages
162,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Packages The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Packages
163,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Packages Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Packages
164,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Packages Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Packages
165,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Packages Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Packages
166,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Packages Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Packages
167,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Packages The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Packages
168,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Arrays Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Arrays
169,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Arrays The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Arrays
170,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Arrays Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Arrays
171,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Arrays Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Arrays
172,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Arrays Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Arrays
173,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Arrays Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Arrays
174,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Arrays The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Arrays
175,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Mathematical functions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
176,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Mathematical functions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
177,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Mathematical functions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
178,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Mathematical functions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
179,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Mathematical functions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
180,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Mathematical functions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
181,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Mathematical functions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Mathematical_functions
182,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Large numbers Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
183,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Large numbers The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
184,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Large numbers Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
185,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Large numbers Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
186,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Large numbers Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
187,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Large numbers Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
188,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Large numbers The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Large_numbers
189,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Random numbers Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
190,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Random numbers The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
191,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Random numbers Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
192,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Random numbers Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
193,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Random numbers Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
194,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Random numbers Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
195,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Random numbers The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Random_numbers
196,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Unicode Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Unicode
197,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Unicode The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Unicode
198,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Unicode Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Unicode
199,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Unicode Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Unicode
200,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Unicode Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Unicode
201,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Unicode Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Unicode
202,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Unicode The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Unicode
203,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Comments Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Comments
204,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Comments The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Comments
205,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Comments Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Comments
206,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Comments Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Comments
207,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Comments Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Comments
208,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Comments Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Comments
209,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Comments The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Comments
210,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Keywords Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Keywords
211,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Keywords The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Keywords
212,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Keywords Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Keywords
213,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Keywords Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Keywords
214,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Keywords Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Keywords
215,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Keywords Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Keywords
216,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Keywords The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Keywords
217,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Coding conventions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
218,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Coding conventions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
219,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Coding conventions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
220,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Coding conventions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
221,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Coding conventions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
222,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Coding conventions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
223,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Coding conventions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Coding_conventions
224,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Defining classes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
225,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Defining classes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
226,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Defining classes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
227,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Defining classes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
228,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Defining classes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
229,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Defining classes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
230,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Defining classes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Defining_Classes
231,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Inheritance Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
232,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Inheritance The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
233,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Inheritance Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
234,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Inheritance Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
235,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Inheritance Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
236,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Inheritance Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
237,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Inheritance The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Inheritance
238,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Interfaces Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
239,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Interfaces The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
240,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Interfaces Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
241,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Interfaces Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
242,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Interfaces Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
243,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Interfaces Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
244,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Interfaces The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Interfaces
245,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Overloading methods and constructors Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
246,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Overloading methods and constructors The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
247,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Overloading methods and constructors Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
248,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Overloading methods and constructors Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
249,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Overloading methods and constructors Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
250,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Overloading methods and constructors Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
251,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Overloading methods and constructors The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Overloading_Methods_and_Constructors
252,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Object Lifecycle Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
253,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Object Lifecycle The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
254,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Object Lifecycle Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
255,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Object Lifecycle Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
256,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Object Lifecycle Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
257,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Object Lifecycle Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
258,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Object Lifecycle The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Object_Lifecycle
259,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Scope Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Scope
260,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Scope The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Scope
261,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Scope Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Scope
262,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Scope Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Scope
263,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Scope Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Scope
264,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Scope Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Scope
265,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Scope The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Scope
266,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Nested classes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
267,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Nested classes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
268,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Nested classes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
269,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Nested classes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
270,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Nested classes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
271,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Nested classes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
272,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Nested classes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Nested_Classes
273,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Generics Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Generics
274,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Generics The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Generics
275,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Generics Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Generics
276,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Generics Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Generics
277,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Generics Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Generics
278,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Generics Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Generics
279,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Generics The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Generics
280,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Collection Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Collection
281,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Collection The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Collection
282,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Collection Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Collection
283,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Collection Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Collection
284,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Collection Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Collection
285,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Collection Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Collection
286,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Collection The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Collection
287,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",ArrayList Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
288,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",ArrayList The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
289,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",ArrayList Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
290,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",ArrayList Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
291,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",ArrayList Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
292,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",ArrayList Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
293,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",ArrayList The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/ArrayList
294,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Map Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Map
295,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Map The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Map
296,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Map Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Map
297,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Map Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Map
298,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Map Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Map
299,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Map Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Map
300,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Map The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Map
301,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Comparing Objects Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
302,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Comparing Objects The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
303,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Comparing Objects Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
304,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Comparing Objects Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
305,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Comparing Objects Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
306,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Comparing Objects Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
307,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Comparing Objects The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Comparing_Objects
308,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Throwing and catching exceptions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
309,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Throwing and catching exceptions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
310,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Throwing and catching exceptions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
311,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Throwing and catching exceptions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
312,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Throwing and catching exceptions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
313,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Throwing and catching exceptions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
314,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Throwing and catching exceptions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Throwing_and_Catching_Exceptions
315,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Checked exceptions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
316,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Checked exceptions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
317,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Checked exceptions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
318,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Checked exceptions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
319,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Checked exceptions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
320,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Checked exceptions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
321,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Checked exceptions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Checked_Exceptions
322,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Unchecked exceptions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
323,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Unchecked exceptions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
324,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Unchecked exceptions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
325,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Unchecked exceptions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
326,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Unchecked exceptions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
327,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Unchecked exceptions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
328,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Unchecked exceptions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Unchecked_Exceptions
329,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Preventing NullPointerException Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
330,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Preventing NullPointerException The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
331,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Preventing NullPointerException Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
332,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Preventing NullPointerException Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
333,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Preventing NullPointerException Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
334,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Preventing NullPointerException Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
335,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Preventing NullPointerException The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Preventing_NullPointerException
336,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Stack trace Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
337,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Stack trace The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
338,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Stack trace Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
339,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Stack trace Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
340,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Stack trace Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
341,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Stack trace Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
342,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Stack trace The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Stack_trace
343,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Nesting exceptions (chained exceptions) Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
344,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Nesting exceptions (chained exceptions) The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
345,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Nesting exceptions (chained exceptions) Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
346,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Nesting exceptions (chained exceptions) Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
347,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Nesting exceptions (chained exceptions) Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
348,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Nesting exceptions (chained exceptions) Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
349,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Nesting exceptions (chained exceptions) The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Nesting_Exceptions
350,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Threads and Runnables Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
351,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Threads and Runnables The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
352,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Threads and Runnables Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
353,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Threads and Runnables Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
354,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Threads and Runnables Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
355,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Threads and Runnables Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
356,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Threads and Runnables The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Threads_and_Runnables
357,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Basic Synchronization Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
358,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Basic Synchronization The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
359,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Basic Synchronization Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
360,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Basic Synchronization Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
361,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Basic Synchronization Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
362,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Basic Synchronization Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
363,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Basic Synchronization The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Basic_Synchronization
364,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Client Server Programming Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
365,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Client Server Programming The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
366,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Client Server Programming Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
367,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Client Server Programming Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
368,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Client Server Programming Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
369,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Client Server Programming Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
370,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Client Server Programming The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Client_Server
371,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Remote Method Invocation (RMI) Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
372,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Remote Method Invocation (RMI) The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
373,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Remote Method Invocation (RMI) Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
374,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Remote Method Invocation (RMI) Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
375,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Remote Method Invocation (RMI) Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
376,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Remote Method Invocation (RMI) Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
377,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Remote Method Invocation (RMI) The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Remote_Method_Invocation
378,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Enterprise JavaBean Programming (EJB) Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/EJB
379,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Enterprise JavaBean Programming (EJB) The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/EJB
380,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Enterprise JavaBean Programming (EJB) Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/EJB
381,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Enterprise JavaBean Programming (EJB) Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/EJB
382,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Enterprise JavaBean Programming (EJB) Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/EJB
383,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Enterprise JavaBean Programming (EJB) Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/EJB
384,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Enterprise JavaBean Programming (EJB) The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/EJB
385,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Java Spaces Programming (Jini) Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
386,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Java Spaces Programming (Jini) The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
387,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Java Spaces Programming (Jini) Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
388,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Java Spaces Programming (Jini) Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
389,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Java Spaces Programming (Jini) Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
390,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Java Spaces Programming (Jini) Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
391,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Java Spaces Programming (Jini) The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/JavaSpaces
392,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Javadoc Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
393,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Javadoc The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
394,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Javadoc Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
395,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Javadoc Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
396,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Javadoc Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
397,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Javadoc Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
398,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Javadoc The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Javadoc
399,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Introduction to Annotation Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
400,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Introduction to Annotation The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
401,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Introduction to Annotation Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
402,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Introduction to Annotation Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
403,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Introduction to Annotation Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
404,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Introduction to Annotation Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
405,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Introduction to Annotation The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Introduction
406,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Creating custom annotations Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
407,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Creating custom annotations The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
408,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Creating custom annotations Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
409,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Creating custom annotations Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
410,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Creating custom annotations Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
411,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Creating custom annotations Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
412,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Creating custom annotations The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Custom_Annotations
413,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Meta-annotations Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
414,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Meta-annotations The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
415,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Meta-annotations Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
416,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Meta-annotations Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
417,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Meta-annotations Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
418,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Meta-annotations Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
419,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Meta-annotations The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Meta-Annotations
420,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Helping the compiler Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
421,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Helping the compiler The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
422,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Helping the compiler Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
423,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Helping the compiler Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
424,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Helping the compiler Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
425,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Helping the compiler Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
426,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Helping the compiler The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Annotations/Compiler_and_Annotations
427,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Basic I/O Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
428,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Basic I/O The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
429,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Basic I/O Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
430,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Basic I/O Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
431,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Basic I/O Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
432,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Basic I/O Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
433,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Basic I/O The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Basic_IO
434,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Streams Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Streams
435,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Streams The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Streams
436,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Streams Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Streams
437,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Streams Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Streams
438,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Streams Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Streams
439,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Streams Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Streams
440,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Streams The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Streams
441,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Event handling Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
442,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Event handling The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
443,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Event handling Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
444,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Event handling Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
445,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Event handling Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
446,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Event handling Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
447,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Event handling The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Event_Handling
448,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",JavaBeans Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
449,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",JavaBeans The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
450,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",JavaBeans Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
451,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",JavaBeans Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
452,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",JavaBeans Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
453,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",JavaBeans Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
454,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",JavaBeans The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/JavaBeans
455,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Canvas Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Canvas
456,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Canvas The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Canvas
457,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Canvas Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Canvas
458,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Canvas Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Canvas
459,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Canvas Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Canvas
460,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Canvas Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Canvas
461,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Canvas The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Canvas
462,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Graphics Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics
463,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Graphics The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics
464,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Graphics Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics
465,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Graphics Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics
466,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Graphics Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics
467,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Graphics Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics
468,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Graphics The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics
469,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing basic shapes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
470,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing basic shapes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
471,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing basic shapes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
472,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing basic shapes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
473,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing basic shapes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
474,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing basic shapes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
475,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing basic shapes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
476,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing complex shapes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
477,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing complex shapes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
478,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing complex shapes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
479,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing complex shapes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
480,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing complex shapes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
481,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing complex shapes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
482,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing complex shapes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
483,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing text Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
484,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing text The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
485,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing text Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
486,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing text Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
487,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing text Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
488,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing text Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
489,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing text The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
490,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Understanding gradients Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
491,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Understanding gradients The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
492,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Understanding gradients Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
493,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Understanding gradients Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
494,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Understanding gradients Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
495,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Understanding gradients Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
496,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Understanding gradients The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
497,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Applets Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Applets
498,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Applets The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Applets
499,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Applets Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Applets
500,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Applets Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Applets
501,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Applets Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Applets
502,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Applets Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Applets
503,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Applets The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Applets
504,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing basic shapes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
505,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing basic shapes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
506,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing basic shapes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
507,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing basic shapes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
508,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing basic shapes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
509,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing basic shapes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
510,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing basic shapes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_shapes
511,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing complex shapes Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
512,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing complex shapes The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
513,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing complex shapes Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
514,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing complex shapes Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
515,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing complex shapes Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
516,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing complex shapes Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
517,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing complex shapes The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_complex_shapes
518,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Drawing text Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
519,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Drawing text The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
520,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Drawing text Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
521,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Drawing text Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
522,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Drawing text Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
523,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Drawing text Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
524,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Drawing text The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Drawing_text
525,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Understanding gradients Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
526,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Understanding gradients The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
527,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Understanding gradients Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
528,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Understanding gradients Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
529,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Understanding gradients Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
530,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Understanding gradients Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
531,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Understanding gradients The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Graphics/Understanding_gradients
532,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Overview Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
533,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Overview The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
534,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Overview Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
535,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Overview Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
536,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Overview Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
537,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Overview Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
538,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Overview The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Applets/Overview
539,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",User Interface Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
540,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",User Interface The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
541,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",User Interface Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
542,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",User Interface Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
543,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",User Interface Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
544,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",User Interface Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
545,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",User Interface The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Applets/User_Interface
546,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Event Listeners Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
547,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Event Listeners The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
548,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Event Listeners Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
549,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Event Listeners Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
550,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Event Listeners Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
551,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Event Listeners Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
552,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Event Listeners The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Applets/Event_Listeners
553,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Graphics and Media Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
554,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Graphics and Media The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
555,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Graphics and Media Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
556,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Graphics and Media Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
557,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Graphics and Media Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
558,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Graphics and Media Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
559,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Graphics and Media The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Applets/Graphics_and_Media
560,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Reflection Overview Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
561,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Reflection Overview The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
562,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Reflection Overview Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
563,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Reflection Overview Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
564,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Reflection Overview Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
565,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Reflection Overview Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
566,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Reflection Overview The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Overview
567,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Dynamic Class Loading Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
568,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Dynamic Class Loading The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
569,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Dynamic Class Loading Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
570,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Dynamic Class Loading Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
571,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Dynamic Class Loading Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
572,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Dynamic Class Loading Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
573,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Dynamic Class Loading The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Class_Loading
574,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Dynamic Method Invocation Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
575,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Dynamic Method Invocation The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
576,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Dynamic Method Invocation Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
577,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Dynamic Method Invocation Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
578,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Dynamic Method Invocation Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
579,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Dynamic Method Invocation Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
580,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Dynamic Method Invocation The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Dynamic_Invocation
581,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Accessing Private Features with Reflection Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
582,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Accessing Private Features with Reflection The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
583,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Accessing Private Features with Reflection Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
584,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Accessing Private Features with Reflection Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
585,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Accessing Private Features with Reflection Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
586,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Accessing Private Features with Reflection Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
587,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Accessing Private Features with Reflection The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Reflection/Accessing_Private_Features_with_Reflection
588,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Networking Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Networking
589,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Networking The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Networking
590,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Networking Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Networking
591,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Networking Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Networking
592,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Networking Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Networking
593,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Networking Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Networking
594,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Networking The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Networking
595,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Database programming Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
596,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Database programming The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
597,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Database programming Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
598,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Database programming Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
599,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Database programming Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
600,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Database programming Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
601,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Database programming The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Database_Programming
602,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Regular Expressions Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
603,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Regular Expressions The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
604,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Regular Expressions Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
605,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Regular Expressions Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
606,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Regular Expressions Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
607,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Regular Expressions Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
608,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Regular Expressions The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Regular_Expressions
609,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .","Libraries, extensions and frameworks Understanding systems","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
610,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.","Libraries, extensions and frameworks The process of abstraction","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
611,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).","Libraries, extensions and frameworks Thinking in objects","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
612,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).","Libraries, extensions and frameworks Understanding class definitions and types","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
613,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.","Libraries, extensions and frameworks Expanding your class definitions","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
614,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.","Libraries, extensions and frameworks Adding behavior to objects","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
615,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.","Libraries, extensions and frameworks The process of encapsulation","https://en.wikibooks.org//wiki/Java_Programming/Libraries,_extensions_and_frameworks"
616,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",3D programming Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
617,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",3D programming The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
618,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",3D programming Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
619,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",3D programming Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
620,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",3D programming Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
621,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",3D programming Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
622,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",3D programming The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/3D_Programming
623,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Java Native Interface Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
624,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Java Native Interface The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
625,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Java Native Interface Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
626,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Java Native Interface Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
627,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Java Native Interface Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
628,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Java Native Interface Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
629,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Java Native Interface The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Java_Native_Interface
630,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Invoking C Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
631,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Invoking C The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
632,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Invoking C Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
633,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Invoking C Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
634,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Invoking C Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
635,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Invoking C Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
636,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Invoking C The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Invoking_C
637,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Byte Code Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
638,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Byte Code The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
639,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Byte Code Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
640,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Byte Code Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
641,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Byte Code Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
642,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Byte Code Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
643,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Byte Code The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Byte_Code
644,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Links Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Links
645,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Links The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Links
646,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Links Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Links
647,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Links Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Links
648,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Links Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Links
649,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Links Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Links
650,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Links The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Links
651,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Glossary Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Glossary
652,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Glossary The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Glossary
653,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Glossary Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Glossary
654,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Glossary Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Glossary
655,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Glossary Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Glossary
656,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Glossary Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Glossary
657,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Glossary The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Glossary
658,"We conceptualize the world around us in terms of systems. A system is a web of interconnected objects working together in tandem. In the systems theory , a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:inputs: messages received from the surrounding environment; and,  outputs: messages given back to the surrounding environment.Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected sub-systems  where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using feedback messages  that is, inputs and outputs .",Index Understanding systems,https://en.wikibooks.org//wiki/Java_Programming/Index
659,"Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.Abstraction is the process of representing real-life problems and objects into your programs.Suppose a novelist, a painter and a programmer were asked to abstract (i.e., represent ) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is an animal . Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal  but what about a computer programmer?The Java programming language uses a programming paradigm called object-oriented programming (OOP) , which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.",Index The process of abstraction,https://en.wikibooks.org//wiki/Java_Programming/Index
660,"In OOP, every abstraction of a real-life object is simply called an object within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):The code above creates a space within your code where you can start defining an object; this space is called a class ( or type) definition . All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets  anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called Animal for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., class ). Such predefined words in the Java language are known as keywords and make up the grammar for the language (known as programming syntax ).",Index Thinking in objects,https://en.wikibooks.org//wiki/Java_Programming/Index
661,"Aristotle was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes  e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:The code above effectively creates an object called dog based on the class definition for Animal . In non-programmer parlance, the code above would translate into something akin to saying, ""Create a new object dog of type Animal ."" A single class definition enables you to create multiple objects as the code below indicates:Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).",Index Understanding class definitions and types,https://en.wikibooks.org//wiki/Java_Programming/Index
662,"Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields ) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:In the code above you defined two object fields:a field called name of type String ; and,  a field called legs of type int .These special pre-defined types are called data types . The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric valuesIn order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:You can access the fields of your created objects by using the . (dot) or membership operator . In the example above, we created two objects: animal1 and animal2 of type Animal . And since, we had established that each Animal has two fields namely name and legs , we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state . So, for instance:the animal1 object is a ""dog"" with 4 legs to walk with; while,  the animal2 object is a ""duck"" with 2 legs to walk with.What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.",Index Expanding your class definitions,https://en.wikibooks.org//wiki/Java_Programming/Index
663,"At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method .In the case of the Animal , you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope ) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope . This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope .In this instance, the name of our method is walk . Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments .A method therefore enables an object to:Accept input: Receive some argument(s);  Process information: work on the received argument(s) within its curly brackets; and,  Generate ouput: occasionally , return something back.In essence, methods are what makes an object behave more like a system.Notice the keyword void before the name of the method  this tells us that the method walk returns nothing . You can set a method to return any data type  it can be a String or an int as well.",Index Adding behavior to objects,https://en.wikibooks.org//wiki/Java_Programming/Index
664,"By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the Animal object exposed certain fields  name and legs , and a method  walk() to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.",Index The process of encapsulation,https://en.wikibooks.org//wiki/Java_Programming/Index
